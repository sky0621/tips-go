// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Defines values for CourseLevel.
const (
	High   CourseLevel = "high"
	Low    CourseLevel = "low"
	Middle CourseLevel = "middle"
)

// N400BadRequest defines model for 400-BadRequest.
type N400BadRequest struct {
	// Message エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// N404NotFound defines model for 404-NotFound.
type N404NotFound struct {
	// Message エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// ContentID コンテンツを一意に識別するID（フォーマットはUUID v7）
type ContentID = string

// ContentName コンテンツ名
type ContentName = string

// ContentRequest defines model for ContentRequest.
type ContentRequest struct {
	// Name コンテンツ名
	Name     ContentName      `json:"name"`
	Programs []ProgramRequest `json:"programs"`
}

// ContentResponse defines model for ContentResponse.
type ContentResponse struct {
	// ContentID コンテンツを一意に識別するID（フォーマットはUUID v7）
	ContentID ContentID `json:"id"`

	// Name コンテンツ名
	Name     ContentName       `json:"name"`
	Programs []ProgramResponse `json:"programs"`
}

// CourseID コースを一意に識別するID（フォーマットはUUID v7）
type CourseID = string

// CourseLevel コースレベル
type CourseLevel string

// CourseName コース名
type CourseName = string

// CourseRequest defines model for CourseRequest.
type CourseRequest struct {
	// Level コースレベル
	Level CourseLevel `json:"level"`

	// Name コース名
	Name CourseName `json:"name"`
}

// CourseResponse defines model for CourseResponse.
type CourseResponse struct {
	// CourseID コースを一意に識別するID（フォーマットはUUID v7）
	CourseID CourseID `json:"id"`

	// Level コースレベル
	Level CourseLevel `json:"level"`

	// Name コース名
	Name CourseName `json:"name"`
}

// ErrorMessage エラーメッセージ
type ErrorMessage = string

// ProgramAnswer 解答
type ProgramAnswer = string

// ProgramID 問題を一意に識別するID（フォーマットはUUID v7）
type ProgramID = string

// ProgramQuestion 問題
type ProgramQuestion = string

// ProgramRequest defines model for ProgramRequest.
type ProgramRequest struct {
	// Answer 解答
	Answer ProgramAnswer `json:"answer"`

	// Question 問題
	Question ProgramQuestion `json:"question"`
}

// ProgramResponse defines model for ProgramResponse.
type ProgramResponse struct {
	// Answer 解答
	Answer *ProgramAnswer `json:"answer,omitempty"`

	// ProgramID 問題を一意に識別するID（フォーマットはUUID v7）
	ProgramID ProgramID `json:"id"`

	// Question 問題
	Question *ProgramQuestion `json:"question,omitempty"`
}

// ID コンテンツを一意に識別するID（フォーマットはUUID v7）
type ID = ContentID

// ContentPartialNameQuery コンテンツ名
type ContentPartialNameQuery = ContentName

// CourseLevelQuery コースレベル
type CourseLevelQuery = CourseLevel

// GetContentsParams defines parameters for GetContents.
type GetContentsParams struct {
	// PartialName コンテンツ名の部分一致検索用文字列
	PartialName *ContentPartialNameQuery `form:"partialName,omitempty" json:"partialName,omitempty"`
}

// GetCoursesParams defines parameters for GetCourses.
type GetCoursesParams struct {
	// CourseLevel コースレベル一致検索用文字列
	CourseLevel *CourseLevelQuery `form:"courseLevel,omitempty" json:"courseLevel,omitempty"`
}

// PostContentsJSONRequestBody defines body for PostContents for application/json ContentType.
type PostContentsJSONRequestBody = ContentRequest

// PostCoursesJSONRequestBody defines body for PostCourses for application/json ContentType.
type PostCoursesJSONRequestBody = CourseRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// コンテンツ一覧取得
	// (GET /contents)
	GetContents(ctx echo.Context, params GetContentsParams) error
	// コンテンツ新規登録
	// (POST /contents)
	PostContents(ctx echo.Context) error
	// 指定コンテンツ取得
	// (GET /contents/{id})
	GetContentsByID(ctx echo.Context, id ID) error
	// コース一覧取得
	// (GET /courses)
	GetCourses(ctx echo.Context, params GetCoursesParams) error
	// コース新規登録
	// (POST /courses)
	PostCourses(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetContents converts echo context to params.
func (w *ServerInterfaceWrapper) GetContents(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContentsParams
	// ------------- Optional query parameter "partialName" -------------

	err = runtime.BindQueryParameter("form", true, false, "partialName", ctx.QueryParams(), &params.PartialName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partialName: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContents(ctx, params)
	return err
}

// PostContents converts echo context to params.
func (w *ServerInterfaceWrapper) PostContents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostContents(ctx)
	return err
}

// GetContentsByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetContentsByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContentsByID(ctx, id)
	return err
}

// GetCourses converts echo context to params.
func (w *ServerInterfaceWrapper) GetCourses(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCoursesParams
	// ------------- Optional query parameter "courseLevel" -------------

	err = runtime.BindQueryParameter("form", true, false, "courseLevel", ctx.QueryParams(), &params.CourseLevel)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter courseLevel: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCourses(ctx, params)
	return err
}

// PostCourses converts echo context to params.
func (w *ServerInterfaceWrapper) PostCourses(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCourses(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/contents", wrapper.GetContents)
	router.POST(baseURL+"/contents", wrapper.PostContents)
	router.GET(baseURL+"/contents/:id", wrapper.GetContentsByID)
	router.GET(baseURL+"/courses", wrapper.GetCourses)
	router.POST(baseURL+"/courses", wrapper.PostCourses)

}

type GetContentsRequestObject struct {
	Params GetContentsParams
}

type GetContentsResponseObject interface {
	VisitGetContentsResponse(w http.ResponseWriter) error
}

type GetContents200JSONResponse []ContentResponse

func (response GetContents200JSONResponse) VisitGetContentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostContentsRequestObject struct {
	Body *PostContentsJSONRequestBody
}

type PostContentsResponseObject interface {
	VisitPostContentsResponse(w http.ResponseWriter) error
}

type PostContents201JSONResponse ContentResponse

func (response PostContents201JSONResponse) VisitPostContentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostContents400JSONResponse N400BadRequest

func (response PostContents400JSONResponse) VisitPostContentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetContentsByIDRequestObject struct {
	ID ID `json:"id"`
}

type GetContentsByIDResponseObject interface {
	VisitGetContentsByIDResponse(w http.ResponseWriter) error
}

type GetContentsByID200JSONResponse ContentResponse

func (response GetContentsByID200JSONResponse) VisitGetContentsByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetContentsByID400JSONResponse N400BadRequest

func (response GetContentsByID400JSONResponse) VisitGetContentsByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetContentsByID404JSONResponse N404NotFound

func (response GetContentsByID404JSONResponse) VisitGetContentsByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCoursesRequestObject struct {
	Params GetCoursesParams
}

type GetCoursesResponseObject interface {
	VisitGetCoursesResponse(w http.ResponseWriter) error
}

type GetCourses200JSONResponse []CourseResponse

func (response GetCourses200JSONResponse) VisitGetCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCourses400JSONResponse N400BadRequest

func (response GetCourses400JSONResponse) VisitGetCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostCoursesRequestObject struct {
	Body *PostCoursesJSONRequestBody
}

type PostCoursesResponseObject interface {
	VisitPostCoursesResponse(w http.ResponseWriter) error
}

type PostCourses201JSONResponse CourseResponse

func (response PostCourses201JSONResponse) VisitPostCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostCourses400JSONResponse N400BadRequest

func (response PostCourses400JSONResponse) VisitPostCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// コンテンツ一覧取得
	// (GET /contents)
	GetContents(ctx context.Context, request GetContentsRequestObject) (GetContentsResponseObject, error)
	// コンテンツ新規登録
	// (POST /contents)
	PostContents(ctx context.Context, request PostContentsRequestObject) (PostContentsResponseObject, error)
	// 指定コンテンツ取得
	// (GET /contents/{id})
	GetContentsByID(ctx context.Context, request GetContentsByIDRequestObject) (GetContentsByIDResponseObject, error)
	// コース一覧取得
	// (GET /courses)
	GetCourses(ctx context.Context, request GetCoursesRequestObject) (GetCoursesResponseObject, error)
	// コース新規登録
	// (POST /courses)
	PostCourses(ctx context.Context, request PostCoursesRequestObject) (PostCoursesResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetContents operation middleware
func (sh *strictHandler) GetContents(ctx echo.Context, params GetContentsParams) error {
	var request GetContentsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetContents(ctx.Request().Context(), request.(GetContentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetContents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetContentsResponseObject); ok {
		return validResponse.VisitGetContentsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostContents operation middleware
func (sh *strictHandler) PostContents(ctx echo.Context) error {
	var request PostContentsRequestObject

	var body PostContentsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostContents(ctx.Request().Context(), request.(PostContentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostContents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostContentsResponseObject); ok {
		return validResponse.VisitPostContentsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetContentsByID operation middleware
func (sh *strictHandler) GetContentsByID(ctx echo.Context, id ID) error {
	var request GetContentsByIDRequestObject

	request.ID = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetContentsByID(ctx.Request().Context(), request.(GetContentsByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetContentsByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetContentsByIDResponseObject); ok {
		return validResponse.VisitGetContentsByIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCourses operation middleware
func (sh *strictHandler) GetCourses(ctx echo.Context, params GetCoursesParams) error {
	var request GetCoursesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCourses(ctx.Request().Context(), request.(GetCoursesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCourses")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCoursesResponseObject); ok {
		return validResponse.VisitGetCoursesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostCourses operation middleware
func (sh *strictHandler) PostCourses(ctx echo.Context) error {
	var request PostCoursesRequestObject

	var body PostCoursesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCourses(ctx.Request().Context(), request.(PostCoursesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCourses")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCoursesResponseObject); ok {
		return validResponse.VisitPostCoursesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYW3PTRhT+K55tH2VLDmkJeiMx7XhK00CHJ4aHjbTYYqxLVuuEDOOZyMqAaZ2GMkCg",
	"w7RNL5BCEzolD2FIy4/ZKJcn/kJnV7JkW1Isl0BDXyDWXs53zvm+c3b3GlBM3TINZBAbyNeABTHUEUGY",
	"/5owDYIMUi6dqyM8z76oyFawZhHNNIAMaPM5dZ9T9zr/d7Fc2r13w1tf8VorQAAam2FBUgUCMKCOgAw0",
	"FQgAo5m6hpEKZILrSAC2UkU6ZJt/iNFlIIMPxAiT6I/aYgeKChoCuJqvmPlgz3KJfQmGpyAmGqxNQh1l",
	"g+zdWqLOxoG75rWu72wt7N/Y3P3l4d7mT3t31mK+zPAdQ2esyBYY0gu+psFh17GNzqJZVDsM7zZtvqDu",
	"79R9QN2nQ8JUIhNDwIzWNBjOYICtG5Wk/DhUz6OZOrIJ5ww2LYSJhvi4jmwbVtAgE2cwNvHnwVxmgsxb",
	"DK45fQUphKV0VBrNT5rkE7NuqG/RTESsQVyhzds7Wwu7i8vUebq/ft9r/UqdB7T5dbn0ertF3bu0+RtL",
	"lfs9dV3qtqjz7MKFcik3e/L19k0gAHQV6laNGZeKpz4eHRsbySvF0ZH8yeLIWH5aGkN56TJEaHoMfXRq",
	"bBqEUG2CNaMCelkfKrPLBc6qDITvwdLvo7Ph3Vrybi7F7Ed2UlNvBAAyK0BgG1Qw1PlyjSD/j8PWT/kL",
	"OhiijEKM4TxPcVRgLvqQusxcSmfAeWRbpmGjuF+aOlR1eqdhCDAPigOvvNmCwaSfqgZeiY6VDjjcEugt",
	"plnqKINi1HUWnZo5BwSga6paYwGqapUqC06fSvhqZyPc4PV2q2bOyTt/fUMXHH+xvLO1ThcctoF88PS+",
	"73CCjhjQQ+TKLCUKNYBwmETZ1qkKrXWCk7n6Z6Vz6FGKAn3L6Yx7M/UFnG0I/4WH3dpKd7OnEyWkfY26",
	"vmxWmWyaL3myt3oocMFAVy2kEKTmENstZypKHTMUCUwIKsRpw55DOG5w//HPe+t3erYPP6XtlVQVvLvL",
	"B6vt41QSOmBLXcjPMTlwwMn4ezCEn9LikCovGAY7Q+0OMtMQwEwXugwLQ2f6iRjuI3SQJBGxv3UclReD",
	"dRrR6Aid1tQEL9kkzbhsxvN9eqrMZKopKPA9YM1pCypVlBspSEAAdVwDMqgSYtmyKM7NzRUgHy6YuCIG",
	"a23xbHnizOSXZ/IjBalQJTovJUQjnEO+mVmEbd9ssSAVJDbBtJABLQ3I4ERBKpxg7RiSKo+7qPiHAv6j",
	"gji/WF4gg860Bz5FZKIzR+i5q11MDmI0RUy7ITUusXj6XOCWRySJ/ReA4YSwrJqmcBjiFdtPWXSRyHRe",
	"6T9jxc8rDaEvU198Juf6Tqfs6vPoMW3e3n91x1va9GsMXWhyUth1XYfsCgUSV3nL97y/V/hhy7QTYjtl",
	"2t3Bxb7Gx011fqhoZApCcHaN+9yHfPfeH/uPlvcevDxo/0ndJ7T5jPUJdoZpxS7SjVgai0cPvJO9OPIJ",
	"jCBBaixltHm7xwtnhTo/eD9uerda/iVPOjKUfTfTBJDjUM0Fw3Jub3HV++oFdZ5Q91vee1d5y31FnfZu",
	"+4a38R117tJmuwvuYSTrdpLPDNUsXtPURhZJj8+XS/9W1p0nmjdW8xvSgIk2iF6MBzHRvmfp508SRwi3",
	"63kjAeykSXJ8MC2gTttbv+89XOOSekKdxUSaJq7t1EKfpuxgO6Dn+FOG52bf69a76jU9F4phWg27X6U3",
	"mfe+XEXuZeuGnbS/nWbYfVNN64UM8fHpgr28GtQEg7eS/3H7689O8FiM8GynQsQO37nZYnjAFqGlibNF",
	"0LjU+CcAAP//wHVYyYgYAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
