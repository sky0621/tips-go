// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: contents.sql

package rdb

import (
	"context"
	"database/sql"
)

const createContents = `-- name: CreateContents :execlastid
INSERT INTO contents (id, name) VALUES (?, ?)
`

type CreateContentsParams struct {
	ID   sql.NullString
	Name string
}

func (q *Queries) CreateContents(ctx context.Context, arg CreateContentsParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createContents, arg.ID, arg.Name)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const listContents = `-- name: ListContents :many
SELECT id, name FROM contents
`

func (q *Queries) ListContents(ctx context.Context) ([]Content, error) {
	rows, err := q.db.QueryContext(ctx, listContents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Content{}
	for rows.Next() {
		var i Content
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchContents = `-- name: SearchContents :many
SELECT id, name FROM contents WHERE name LIKE ?
`

func (q *Queries) SearchContents(ctx context.Context, name string) ([]Content, error) {
	rows, err := q.db.QueryContext(ctx, searchContents, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Content{}
	for rows.Next() {
		var i Content
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
