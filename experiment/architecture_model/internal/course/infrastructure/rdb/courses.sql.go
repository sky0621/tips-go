// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: courses.sql

package rdb

import (
	"context"
)

const createCourses = `-- name: CreateCourses :execlastid
INSERT INTO courses (id, name, level) VALUES (?, ?, ?)
`

type CreateCoursesParams struct {
	ID    []byte
	Name  string
	Level int32
}

func (q *Queries) CreateCourses(ctx context.Context, arg CreateCoursesParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createCourses, arg.ID, arg.Name, arg.Level)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const listCourses = `-- name: ListCourses :many
SELECT id, name, level FROM courses
`

func (q *Queries) ListCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, listCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Course{}
	for rows.Next() {
		var i Course
		if err := rows.Scan(&i.ID, &i.Name, &i.Level); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCourses = `-- name: SearchCourses :many
SELECT id, name, level FROM courses WHERE level = ?
`

func (q *Queries) SearchCourses(ctx context.Context, level int32) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, searchCourses, level)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Course{}
	for rows.Next() {
		var i Course
		if err := rows.Scan(&i.ID, &i.Name, &i.Level); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
