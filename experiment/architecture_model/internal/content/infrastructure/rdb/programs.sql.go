// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: programs.sql

package rdb

import (
	"context"
	"database/sql"
)

const createProgramsBatch01 = `-- name: CreateProgramsBatch01 :execresult
INSERT INTO programs (id, question, answer, content_id) VALUES
  (?, ?, ?, ?)
`

type CreateProgramsBatch01Params struct {
	ID        sql.NullString
	Question  string
	Answer    string
	ContentID sql.NullString
}

func (q *Queries) CreateProgramsBatch01(ctx context.Context, arg CreateProgramsBatch01Params) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProgramsBatch01,
		arg.ID,
		arg.Question,
		arg.Answer,
		arg.ContentID,
	)
}

const createProgramsBatch02 = `-- name: CreateProgramsBatch02 :execresult
INSERT INTO programs (id, question, answer, content_id) VALUES
  (?, ?, ?, ?),
  (?, ?, ?, ?)
`

type CreateProgramsBatch02Params struct {
	ID          sql.NullString
	Question    string
	Answer      string
	ContentID   sql.NullString
	ID_2        sql.NullString
	Question_2  string
	Answer_2    string
	ContentID_2 sql.NullString
}

func (q *Queries) CreateProgramsBatch02(ctx context.Context, arg CreateProgramsBatch02Params) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProgramsBatch02,
		arg.ID,
		arg.Question,
		arg.Answer,
		arg.ContentID,
		arg.ID_2,
		arg.Question_2,
		arg.Answer_2,
		arg.ContentID_2,
	)
}

const createProgramsBatch03 = `-- name: CreateProgramsBatch03 :execresult
INSERT INTO programs (id, question, answer, content_id) VALUES
  (?, ?, ?, ?),
  (?, ?, ?, ?),
  (?, ?, ?, ?)
`

type CreateProgramsBatch03Params struct {
	ID          sql.NullString
	Question    string
	Answer      string
	ContentID   sql.NullString
	ID_2        sql.NullString
	Question_2  string
	Answer_2    string
	ContentID_2 sql.NullString
	ID_3        sql.NullString
	Question_3  string
	Answer_3    string
	ContentID_3 sql.NullString
}

func (q *Queries) CreateProgramsBatch03(ctx context.Context, arg CreateProgramsBatch03Params) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProgramsBatch03,
		arg.ID,
		arg.Question,
		arg.Answer,
		arg.ContentID,
		arg.ID_2,
		arg.Question_2,
		arg.Answer_2,
		arg.ContentID_2,
		arg.ID_3,
		arg.Question_3,
		arg.Answer_3,
		arg.ContentID_3,
	)
}

const createProgramsBatch04 = `-- name: CreateProgramsBatch04 :execresult
INSERT INTO programs (id, question, answer, content_id) VALUES
  (?, ?, ?, ?),
  (?, ?, ?, ?),
  (?, ?, ?, ?),
  (?, ?, ?, ?)
`

type CreateProgramsBatch04Params struct {
	ID          sql.NullString
	Question    string
	Answer      string
	ContentID   sql.NullString
	ID_2        sql.NullString
	Question_2  string
	Answer_2    string
	ContentID_2 sql.NullString
	ID_3        sql.NullString
	Question_3  string
	Answer_3    string
	ContentID_3 sql.NullString
	ID_4        sql.NullString
	Question_4  string
	Answer_4    string
	ContentID_4 sql.NullString
}

func (q *Queries) CreateProgramsBatch04(ctx context.Context, arg CreateProgramsBatch04Params) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProgramsBatch04,
		arg.ID,
		arg.Question,
		arg.Answer,
		arg.ContentID,
		arg.ID_2,
		arg.Question_2,
		arg.Answer_2,
		arg.ContentID_2,
		arg.ID_3,
		arg.Question_3,
		arg.Answer_3,
		arg.ContentID_3,
		arg.ID_4,
		arg.Question_4,
		arg.Answer_4,
		arg.ContentID_4,
	)
}

const createProgramsBatch05 = `-- name: CreateProgramsBatch05 :execresult
INSERT INTO programs (id, question, answer, content_id) VALUES
  (?, ?, ?, ?),
  (?, ?, ?, ?),
  (?, ?, ?, ?),
  (?, ?, ?, ?),
  (?, ?, ?, ?)
`

type CreateProgramsBatch05Params struct {
	ID          sql.NullString
	Question    string
	Answer      string
	ContentID   sql.NullString
	ID_2        sql.NullString
	Question_2  string
	Answer_2    string
	ContentID_2 sql.NullString
	ID_3        sql.NullString
	Question_3  string
	Answer_3    string
	ContentID_3 sql.NullString
	ID_4        sql.NullString
	Question_4  string
	Answer_4    string
	ContentID_4 sql.NullString
	ID_5        sql.NullString
	Question_5  string
	Answer_5    string
	ContentID_5 sql.NullString
}

func (q *Queries) CreateProgramsBatch05(ctx context.Context, arg CreateProgramsBatch05Params) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProgramsBatch05,
		arg.ID,
		arg.Question,
		arg.Answer,
		arg.ContentID,
		arg.ID_2,
		arg.Question_2,
		arg.Answer_2,
		arg.ContentID_2,
		arg.ID_3,
		arg.Question_3,
		arg.Answer_3,
		arg.ContentID_3,
		arg.ID_4,
		arg.Question_4,
		arg.Answer_4,
		arg.ContentID_4,
		arg.ID_5,
		arg.Question_5,
		arg.Answer_5,
		arg.ContentID_5,
	)
}
