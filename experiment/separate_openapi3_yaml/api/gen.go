// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ActivityIcon アクティビティアイコン
type ActivityIcon = string

// ActivityName アクティビティ名
type ActivityName = string

// AppealContent アピール事項
type AppealContent = string

// BelongTo 所属
type BelongTo = string

// BirthDay 生年月日
type BirthDay struct {
	// Day 「日」
	Day *Day `json:"day,omitempty"`

	// Month 「月」
	Month *Month `json:"month,omitempty"`

	// Year 「年」
	Year *Year `json:"year,omitempty"`
}

// CareerDescription キャリア説明
type CareerDescription = []string

// CareerGroupID キャリアグループを一意に識別するID
type CareerGroupID = int

// CareerGroupLabel キャリアグループラベル
type CareerGroupLabel = string

// CareerID キャリアを一意に識別するID
type CareerID = int

// CareerName キャリア名
type CareerName = string

// CareerPeriodFrom キャリア期間年月From
type CareerPeriodFrom struct {
	// Month 「月」
	Month *Month `json:"month,omitempty"`

	// Year 「年」
	Year *Year `json:"year,omitempty"`
}

// CareerPeriodMonth キャリア期間(月)
type CareerPeriodMonth = int

// CareerPeriodTo キャリア期間年月To
type CareerPeriodTo struct {
	// Month 「月」
	Month *Month `json:"month,omitempty"`

	// Year 「年」
	Year *Year `json:"year,omitempty"`
}

// CareerSkill １キャリアのスキル
type CareerSkill struct {
	// Skill １スキルの属性
	Skill *Skill `json:"skill,omitempty"`

	// Version スキルバージョン
	Version *SkillVersion `json:"version,omitempty"`
}

// CareerSkillGroup １キャリアのスキルグループ
type CareerSkillGroup struct {
	// Label スキルグループラベル
	Label  *SkillGroupLabel `json:"label,omitempty"`
	Skills *[]CareerSkill   `json:"skills,omitempty"`
}

// CareerTask １キャリアのタスク
type CareerTask struct {
	// Description タスク説明
	Description *TaskDescription `json:"description,omitempty"`

	// Name タスク名
	Name *TaskName `json:"name,omitempty"`
}

// Day 「日」
type Day = int

// ErrorMessage エラーメッセージ
type ErrorMessage = string

// Job 職業
type Job = string

// Month 「月」
type Month = int

// NoteID 注釈を一意に識別するID
type NoteID = int

// NoteItemText 注釈内の１要素
type NoteItemText = string

// NoteLabel ラベル
type NoteLabel = string

// NoteMemo メモ
type NoteMemo = string

// PR PR
type PR = string

// QualificationGotDate 取得日
type QualificationGotDate = openapi_types.Date

// QualificationMemo メモ
type QualificationMemo = string

// QualificationName 資格名
type QualificationName = string

// QualificationOrg 組織名
type QualificationOrg = string

// Skill １スキルの属性
type Skill struct {
	// SkillID スキルを一意に識別するキー
	SkillID *SkillID `json:"id,omitempty"`

	// Name スキル名
	Name *SkillName `json:"name,omitempty"`

	// SkillTagID スキルタグを一意に識別するキー
	SkillTagID *SkillTagID `json:"tagId,omitempty"`

	// Url URL
	Url *Url `json:"url,omitempty"`
}

// SkillGroupLabel スキルグループラベル
type SkillGroupLabel = string

// SkillID スキルを一意に識別するキー
type SkillID = int

// SkillName スキル名
type SkillName = string

// SkillTag １スキルタグの属性
type SkillTag struct {
	// SkillTagID スキルタグを一意に識別するキー
	SkillTagID *SkillTagID `json:"id,omitempty"`

	// Name スキルタグ名
	Name *SkillTagName `json:"name,omitempty"`
}

// SkillTagID スキルタグを一意に識別するキー
type SkillTagID = int

// SkillTagName スキルタグ名
type SkillTagName = string

// SkillVersion スキルバージョン
type SkillVersion = string

// SolutionContent 課題解決事例
type SolutionContent = string

// TaskDescription タスク説明
type TaskDescription = []string

// TaskName タスク名
type TaskName = string

// Url URL
type Url = string

// UserActivity １ユーザーのアクティビティ
type UserActivity struct {
	// Icon アクティビティアイコン
	Icon *ActivityIcon `json:"icon,omitempty"`

	// Name アクティビティ名
	Name *ActivityName `json:"name,omitempty"`

	// Url URL
	Url *Url `json:"url,omitempty"`
}

// UserAppeal １ユーザーのアピール事項
type UserAppeal struct {
	// Content アピール事項
	Content *AppealContent `json:"content,omitempty"`
}

// UserAttribute １ユーザーの属性
type UserAttribute struct {
	// AvatarUrl URL
	AvatarUrl *Url `json:"avatarUrl,omitempty"`

	// BelongTo 所属
	BelongTo *BelongTo `json:"belongTo,omitempty"`

	// Birthday 生年月日
	Birthday *BirthDay `json:"birthday,omitempty"`

	// UserID ユーザーを一意に識別するキー
	UserID *UserID `json:"id,omitempty"`

	// Job 職業
	Job *Job `json:"job,omitempty"`

	// Name ユーザーの本名
	Name *UserName `json:"name,omitempty"`

	// Nickname ユーザーのニックネーム
	Nickname *UserNickName `json:"nickname,omitempty"`

	// Pr PR
	Pr *PR `json:"pr,omitempty"`
}

// UserCareer １キャリアグループのキャリア
type UserCareer struct {
	// Description キャリア説明
	Description *CareerDescription `json:"description,omitempty"`

	// From キャリア期間年月From
	From *CareerPeriodFrom `json:"from,omitempty"`

	// CareerID キャリアを一意に識別するID
	CareerID *CareerID `json:"id,omitempty"`

	// Name キャリア名
	Name *CareerName `json:"name,omitempty"`

	// SkillGroups １キャリアのスキルグループ群
	SkillGroups *[]CareerSkillGroup `json:"skillGroups,omitempty"`

	// Tasks １キャリアのタスク群
	Tasks *[]CareerTask `json:"tasks,omitempty"`

	// To キャリア期間年月To
	To *CareerPeriodTo `json:"to,omitempty"`
}

// UserCareerGroup １ユーザーのキャリアグループ
type UserCareerGroup struct {
	// Careers １ユーザーのキャリアグループのキャリア群
	Careers *[]UserCareer `json:"careers,omitempty"`

	// CareerGroupID キャリアグループを一意に識別するID
	CareerGroupID *CareerGroupID `json:"id,omitempty"`

	// Label キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// UserCareerGroupOwn １ユーザーのキャリアグループ自身
type UserCareerGroupOwn struct {
	// CareerGroupID キャリアグループを一意に識別するID
	CareerGroupID *CareerGroupID `json:"id,omitempty"`

	// Label キャリアグループラベル
	Label *CareerGroupLabel `json:"label,omitempty"`
}

// UserID ユーザーを一意に識別するキー
type UserID = int

// UserName ユーザーの本名
type UserName = string

// UserNickName ユーザーのニックネーム
type UserNickName = string

// UserNote １ユーザーの注釈
type UserNote struct {
	Items *[]UserNoteItem `json:"items,omitempty"`

	// Label ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// Memo メモ
	Memo *NoteMemo `json:"memo,omitempty"`
}

// UserNoteItem １ユーザーの注釈内の１要素
type UserNoteItem struct {
	// Text 注釈内の１要素
	Text *NoteItemText `json:"text,omitempty"`
}

// UserNoteOwn １ユーザーの注釈自身
type UserNoteOwn struct {
	// Label ラベル
	Label *NoteLabel `json:"label,omitempty"`

	// Memo メモ
	Memo *NoteMemo `json:"memo,omitempty"`
}

// UserQualification １ユーザーの資格情報
type UserQualification struct {
	// GotDate 取得日
	GotDate *QualificationGotDate `json:"gotDate,omitempty"`

	// Memo メモ
	Memo *QualificationMemo `json:"memo,omitempty"`

	// Name 資格名
	Name *QualificationName `json:"name,omitempty"`

	// Organization 組織名
	Organization *QualificationOrg `json:"organization,omitempty"`

	// Url URL
	Url *Url `json:"url,omitempty"`
}

// UserSkill １ユーザーのスキルを使用Version・使用期間別に保持したもの
type UserSkill struct {
	// Name スキル名
	Name *SkillName `json:"name,omitempty"`

	// Period キャリア期間(月)
	Period *CareerPeriodMonth `json:"period,omitempty"`

	// Url URL
	Url      *Url                `json:"url,omitempty"`
	Versions *[]UserSkillVersion `json:"versions,omitempty"`
}

// UserSkillTag １ユーザーのスキルタグ及び配下のスキル群を使用Version・使用期間別に保持したもの
type UserSkillTag struct {
	Skills *[]UserSkill `json:"skills,omitempty"`

	// TagName スキルタグ名
	TagName *SkillTagName `json:"tagName,omitempty"`
}

// UserSkillVersion １ユーザーのスキルVersionを使用期間別に保持したもの
type UserSkillVersion struct {
	// From キャリア期間年月From
	From *CareerPeriodFrom `json:"from,omitempty"`

	// Period キャリア期間(月)
	Period *CareerPeriodMonth `json:"period,omitempty"`

	// To キャリア期間年月To
	To *CareerPeriodTo `json:"to,omitempty"`

	// Version スキルバージョン
	Version *SkillVersion `json:"version,omitempty"`
}

// UserSolution １ユーザーの課題解決事例
type UserSolution struct {
	// Content 課題解決事例
	Content *SolutionContent `json:"content,omitempty"`
}

// Year 「年」
type Year = int

// CareerGroupId キャリアグループを一意に識別するID
type CareerGroupId = CareerGroupID

// CareerId キャリアを一意に識別するID
type CareerId = CareerID

// NoteId 注釈を一意に識別するID
type NoteId = NoteID

// SkillId スキルを一意に識別するキー
type SkillId = SkillID

// SkillTagId スキルタグを一意に識別するキー
type SkillTagId = SkillTagID

// SkillTagIdQuery スキルタグを一意に識別するキー
type SkillTagIdQuery = SkillTagID

// UserId ユーザーを一意に識別するキー
type UserId = UserID

// N400BadRequest defines model for 400-BadRequest.
type N400BadRequest struct {
	// Message エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// N404NotFound defines model for 404-NotFound.
type N404NotFound struct {
	// Message エラーメッセージ
	Message *ErrorMessage `json:"message,omitempty"`
}

// PostSkillrecordsJSONBody defines parameters for PostSkillrecords.
type PostSkillrecordsJSONBody = []Skill

// GetSkillsParams defines parameters for GetSkills.
type GetSkillsParams struct {
	Tag *SkillTagIdQuery `form:"tag,omitempty" json:"tag,omitempty"`
}

// PostSkillsParams defines parameters for PostSkills.
type PostSkillsParams struct {
	Tag *SkillTagIdQuery `form:"tag,omitempty" json:"tag,omitempty"`
}

// PutUsersByUserIdActivitiesJSONBody defines parameters for PutUsersByUserIdActivities.
type PutUsersByUserIdActivitiesJSONBody = []UserActivity

// PutUsersByUserIdAppealsJSONBody defines parameters for PutUsersByUserIdAppeals.
type PutUsersByUserIdAppealsJSONBody = []UserAppeal

// PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody defines parameters for PutUsersByUserIdCareergroupsByCareerGroupIdCareers.
type PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody = []UserCareer

// PutUsersByUserIdNotesByNoteIdItemsJSONBody defines parameters for PutUsersByUserIdNotesByNoteIdItems.
type PutUsersByUserIdNotesByNoteIdItemsJSONBody = []UserNoteItem

// PutUsersByUserIdQualificationsJSONBody defines parameters for PutUsersByUserIdQualifications.
type PutUsersByUserIdQualificationsJSONBody = []UserQualification

// PutUsersByUserIdSolutionsJSONBody defines parameters for PutUsersByUserIdSolutions.
type PutUsersByUserIdSolutionsJSONBody = []UserSolution

// PostSkillrecordsJSONRequestBody defines body for PostSkillrecords for application/json ContentType.
type PostSkillrecordsJSONRequestBody = PostSkillrecordsJSONBody

// PostSkillsJSONRequestBody defines body for PostSkills for application/json ContentType.
type PostSkillsJSONRequestBody = Skill

// PostSkilltagsJSONRequestBody defines body for PostSkilltags for application/json ContentType.
type PostSkilltagsJSONRequestBody = SkillTag

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = UserAttribute

// PutUsersByUserIdActivitiesJSONRequestBody defines body for PutUsersByUserIdActivities for application/json ContentType.
type PutUsersByUserIdActivitiesJSONRequestBody = PutUsersByUserIdActivitiesJSONBody

// PutUsersByUserIdAppealsJSONRequestBody defines body for PutUsersByUserIdAppeals for application/json ContentType.
type PutUsersByUserIdAppealsJSONRequestBody = PutUsersByUserIdAppealsJSONBody

// PutUsersByUserIdAttributeJSONRequestBody defines body for PutUsersByUserIdAttribute for application/json ContentType.
type PutUsersByUserIdAttributeJSONRequestBody = UserAttribute

// PostUsersByUserIdCareergroupsJSONRequestBody defines body for PostUsersByUserIdCareergroups for application/json ContentType.
type PostUsersByUserIdCareergroupsJSONRequestBody = UserCareerGroup

// PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody defines body for PutUsersByUserIdCareergroupsByCareerGroupId for application/json ContentType.
type PutUsersByUserIdCareergroupsByCareerGroupIdJSONRequestBody = UserCareerGroupOwn

// PostUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody defines body for PostUsersByUserIdCareergroupsByCareerGroupIdCareers for application/json ContentType.
type PostUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody = UserCareer

// PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody defines body for PutUsersByUserIdCareergroupsByCareerGroupIdCareers for application/json ContentType.
type PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONRequestBody = PutUsersByUserIdCareergroupsByCareerGroupIdCareersJSONBody

// PostUsersByUserIdNotesJSONRequestBody defines body for PostUsersByUserIdNotes for application/json ContentType.
type PostUsersByUserIdNotesJSONRequestBody = UserNote

// PutUsersByUserIdNotesByNoteIdJSONRequestBody defines body for PutUsersByUserIdNotesByNoteId for application/json ContentType.
type PutUsersByUserIdNotesByNoteIdJSONRequestBody = UserNoteOwn

// PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody defines body for PutUsersByUserIdNotesByNoteIdItems for application/json ContentType.
type PutUsersByUserIdNotesByNoteIdItemsJSONRequestBody = PutUsersByUserIdNotesByNoteIdItemsJSONBody

// PutUsersByUserIdQualificationsJSONRequestBody defines body for PutUsersByUserIdQualifications for application/json ContentType.
type PutUsersByUserIdQualificationsJSONRequestBody = PutUsersByUserIdQualificationsJSONBody

// PutUsersByUserIdSolutionsJSONRequestBody defines body for PutUsersByUserIdSolutions for application/json ContentType.
type PutUsersByUserIdSolutionsJSONRequestBody = PutUsersByUserIdSolutionsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// スキル一括登録
	// (POST /skillrecords)
	PostSkillrecords(ctx echo.Context) error
	// スキル群取得
	// (GET /skills)
	GetSkills(ctx echo.Context, params GetSkillsParams) error
	// スキル登録
	// (POST /skills)
	PostSkills(ctx echo.Context, params PostSkillsParams) error
	// 指定スキル取得
	// (GET /skills/{bySkillId})
	GetSkillsBySkillId(ctx echo.Context, bySkillId SkillId) error
	// 全スキルタグ取得
	// (GET /skilltags)
	GetSkilltags(ctx echo.Context) error
	// スキルタグ登録
	// (POST /skilltags)
	PostSkilltags(ctx echo.Context) error
	// 指定スキルタグ取得
	// (GET /skilltags/{bySkillTagId})
	GetSkilltagsBySkillTagId(ctx echo.Context, bySkillTagId SkillTagId) error
	// ユーザー一覧取得
	// (GET /users)
	GetUsers(ctx echo.Context) error
	// ユーザーアカウント登録
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// 指定ユーザーアカウント削除
	// (DELETE /users/{byUserId})
	DeleteUsersByUserId(ctx echo.Context, byUserId UserId) error
	// アクティビティ群取得
	// (GET /users/{byUserId}/activities)
	GetUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error
	// アクティビティ群最新化
	// (PUT /users/{byUserId}/activities)
	PutUsersByUserIdActivities(ctx echo.Context, byUserId UserId) error
	// アピール事項群取得
	// (GET /users/{byUserId}/appeals)
	GetUsersByUserIdAppeals(ctx echo.Context, byUserId UserId) error
	// アピール事項群最新化
	// (PUT /users/{byUserId}/appeals)
	PutUsersByUserIdAppeals(ctx echo.Context, byUserId UserId) error
	// 属性取得
	// (GET /users/{byUserId}/attribute)
	GetUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error
	// 属性更新
	// (PUT /users/{byUserId}/attribute)
	PutUsersByUserIdAttribute(ctx echo.Context, byUserId UserId) error
	// キャリアグループ群取得
	// (GET /users/{byUserId}/careergroups)
	GetUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error
	// キャリアグループ新規登録
	// (POST /users/{byUserId}/careergroups)
	PostUsersByUserIdCareergroups(ctx echo.Context, byUserId UserId) error
	// 【未実装】キャリアグループ削除
	// (DELETE /users/{byUserId}/careergroups/{byCareerGroupId})
	DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// １キャリアグループ取得
	// (GET /users/{byUserId}/careergroups/{byCareerGroupId})
	GetUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 【未実装】キャリアグループ更新
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId})
	PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// １キャリアグループ内の１キャリア登録
	// (POST /users/{byUserId}/careergroups/{byCareerGroupId}/careers)
	PostUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// 【未実装】キャリアグループ内キャリア群最新化
	// (PUT /users/{byUserId}/careergroups/{byCareerGroupId}/careers)
	PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId) error
	// １キャリア取得
	// (GET /users/{byUserId}/careergroups/{byCareerGroupId}/careers/{byCareerId})
	GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId(ctx echo.Context, byUserId UserId, byCareerGroupId CareerGroupId, byCareerId CareerId) error
	// 注釈群取得
	// (GET /users/{byUserId}/notes)
	GetUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error
	// 注釈新規登録
	// (POST /users/{byUserId}/notes)
	PostUsersByUserIdNotes(ctx echo.Context, byUserId UserId) error
	// 【未実装】注釈削除
	// (DELETE /users/{byUserId}/notes/{byNoteId})
	DeleteUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 【未実装】注釈更新
	// (PUT /users/{byUserId}/notes/{byNoteId})
	PutUsersByUserIdNotesByNoteId(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 【未実装】注釈内要素群最新化
	// (PUT /users/{byUserId}/notes/{byNoteId}/items)
	PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context, byUserId UserId, byNoteId NoteId) error
	// 資格情報群取得
	// (GET /users/{byUserId}/qualifications)
	GetUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error
	// 資格情報群最新化
	// (PUT /users/{byUserId}/qualifications)
	PutUsersByUserIdQualifications(ctx echo.Context, byUserId UserId) error
	// スキル群取得
	// (GET /users/{byUserId}/skills)
	GetUsersByUserIdSkills(ctx echo.Context, byUserId UserId) error
	// 課題解決事例群取得
	// (GET /users/{byUserId}/solutions)
	GetUsersByUserIdSolutions(ctx echo.Context, byUserId UserId) error
	// 課題解決事例群最新化
	// (PUT /users/{byUserId}/solutions)
	PutUsersByUserIdSolutions(ctx echo.Context, byUserId UserId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostSkillrecords converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkillrecords(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSkillrecords(ctx)
	return err
}

// GetSkills converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkills(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSkillsParams
	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSkills(ctx, params)
	return err
}

// PostSkills converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkills(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSkillsParams
	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSkills(ctx, params)
	return err
}

// GetSkillsBySkillId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkillsBySkillId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bySkillId" -------------
	var bySkillId SkillId

	err = runtime.BindStyledParameterWithOptions("simple", "bySkillId", ctx.Param("bySkillId"), &bySkillId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bySkillId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSkillsBySkillId(ctx, bySkillId)
	return err
}

// GetSkilltags converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkilltags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSkilltags(ctx)
	return err
}

// PostSkilltags converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkilltags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSkilltags(ctx)
	return err
}

// GetSkilltagsBySkillTagId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkilltagsBySkillTagId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bySkillTagId" -------------
	var bySkillTagId SkillTagId

	err = runtime.BindStyledParameterWithOptions("simple", "bySkillTagId", ctx.Param("bySkillTagId"), &bySkillTagId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bySkillTagId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSkilltagsBySkillTagId(ctx, bySkillTagId)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersByUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersByUserId(ctx, byUserId)
	return err
}

// GetUsersByUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersByUserIdActivities(ctx, byUserId)
	return err
}

// PutUsersByUserIdActivities converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsersByUserIdActivities(ctx, byUserId)
	return err
}

// GetUsersByUserIdAppeals converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdAppeals(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersByUserIdAppeals(ctx, byUserId)
	return err
}

// PutUsersByUserIdAppeals converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdAppeals(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsersByUserIdAppeals(ctx, byUserId)
	return err
}

// GetUsersByUserIdAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersByUserIdAttribute(ctx, byUserId)
	return err
}

// PutUsersByUserIdAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsersByUserIdAttribute(ctx, byUserId)
	return err
}

// GetUsersByUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersByUserIdCareergroups(ctx, byUserId)
	return err
}

// PostUsersByUserIdCareergroups converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserIdCareergroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersByUserIdCareergroups(ctx, byUserId)
	return err
}

// DeleteUsersByUserIdCareergroupsByCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "byCareerGroupId", ctx.Param("byCareerGroupId"), &byCareerGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersByUserIdCareergroupsByCareerGroupId(ctx, byUserId, byCareerGroupId)
	return err
}

// GetUsersByUserIdCareergroupsByCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "byCareerGroupId", ctx.Param("byCareerGroupId"), &byCareerGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersByUserIdCareergroupsByCareerGroupId(ctx, byUserId, byCareerGroupId)
	return err
}

// PutUsersByUserIdCareergroupsByCareerGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdCareergroupsByCareerGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "byCareerGroupId", ctx.Param("byCareerGroupId"), &byCareerGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsersByUserIdCareergroupsByCareerGroupId(ctx, byUserId, byCareerGroupId)
	return err
}

// PostUsersByUserIdCareergroupsByCareerGroupIdCareers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "byCareerGroupId", ctx.Param("byCareerGroupId"), &byCareerGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx, byUserId, byCareerGroupId)
	return err
}

// PutUsersByUserIdCareergroupsByCareerGroupIdCareers converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "byCareerGroupId", ctx.Param("byCareerGroupId"), &byCareerGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsersByUserIdCareergroupsByCareerGroupIdCareers(ctx, byUserId, byCareerGroupId)
	return err
}

// GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byCareerGroupId" -------------
	var byCareerGroupId CareerGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "byCareerGroupId", ctx.Param("byCareerGroupId"), &byCareerGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerGroupId: %s", err))
	}

	// ------------- Path parameter "byCareerId" -------------
	var byCareerId CareerId

	err = runtime.BindStyledParameterWithOptions("simple", "byCareerId", ctx.Param("byCareerId"), &byCareerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byCareerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId(ctx, byUserId, byCareerGroupId, byCareerId)
	return err
}

// GetUsersByUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersByUserIdNotes(ctx, byUserId)
	return err
}

// PostUsersByUserIdNotes converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersByUserIdNotes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersByUserIdNotes(ctx, byUserId)
	return err
}

// DeleteUsersByUserIdNotesByNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersByUserIdNotesByNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithOptions("simple", "byNoteId", ctx.Param("byNoteId"), &byNoteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersByUserIdNotesByNoteId(ctx, byUserId, byNoteId)
	return err
}

// PutUsersByUserIdNotesByNoteId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdNotesByNoteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithOptions("simple", "byNoteId", ctx.Param("byNoteId"), &byNoteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsersByUserIdNotesByNoteId(ctx, byUserId, byNoteId)
	return err
}

// PutUsersByUserIdNotesByNoteIdItems converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdNotesByNoteIdItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// ------------- Path parameter "byNoteId" -------------
	var byNoteId NoteId

	err = runtime.BindStyledParameterWithOptions("simple", "byNoteId", ctx.Param("byNoteId"), &byNoteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byNoteId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsersByUserIdNotesByNoteIdItems(ctx, byUserId, byNoteId)
	return err
}

// GetUsersByUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersByUserIdQualifications(ctx, byUserId)
	return err
}

// PutUsersByUserIdQualifications converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdQualifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsersByUserIdQualifications(ctx, byUserId)
	return err
}

// GetUsersByUserIdSkills converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdSkills(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersByUserIdSkills(ctx, byUserId)
	return err
}

// GetUsersByUserIdSolutions converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersByUserIdSolutions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersByUserIdSolutions(ctx, byUserId)
	return err
}

// PutUsersByUserIdSolutions converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersByUserIdSolutions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "byUserId" -------------
	var byUserId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "byUserId", ctx.Param("byUserId"), &byUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byUserId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsersByUserIdSolutions(ctx, byUserId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/skillrecords", wrapper.PostSkillrecords)
	router.GET(baseURL+"/skills", wrapper.GetSkills)
	router.POST(baseURL+"/skills", wrapper.PostSkills)
	router.GET(baseURL+"/skills/:bySkillId", wrapper.GetSkillsBySkillId)
	router.GET(baseURL+"/skilltags", wrapper.GetSkilltags)
	router.POST(baseURL+"/skilltags", wrapper.PostSkilltags)
	router.GET(baseURL+"/skilltags/:bySkillTagId", wrapper.GetSkilltagsBySkillTagId)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:byUserId", wrapper.DeleteUsersByUserId)
	router.GET(baseURL+"/users/:byUserId/activities", wrapper.GetUsersByUserIdActivities)
	router.PUT(baseURL+"/users/:byUserId/activities", wrapper.PutUsersByUserIdActivities)
	router.GET(baseURL+"/users/:byUserId/appeals", wrapper.GetUsersByUserIdAppeals)
	router.PUT(baseURL+"/users/:byUserId/appeals", wrapper.PutUsersByUserIdAppeals)
	router.GET(baseURL+"/users/:byUserId/attribute", wrapper.GetUsersByUserIdAttribute)
	router.PUT(baseURL+"/users/:byUserId/attribute", wrapper.PutUsersByUserIdAttribute)
	router.GET(baseURL+"/users/:byUserId/careergroups", wrapper.GetUsersByUserIdCareergroups)
	router.POST(baseURL+"/users/:byUserId/careergroups", wrapper.PostUsersByUserIdCareergroups)
	router.DELETE(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId", wrapper.DeleteUsersByUserIdCareergroupsByCareerGroupId)
	router.GET(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId", wrapper.GetUsersByUserIdCareergroupsByCareerGroupId)
	router.PUT(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId", wrapper.PutUsersByUserIdCareergroupsByCareerGroupId)
	router.POST(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId/careers", wrapper.PostUsersByUserIdCareergroupsByCareerGroupIdCareers)
	router.PUT(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId/careers", wrapper.PutUsersByUserIdCareergroupsByCareerGroupIdCareers)
	router.GET(baseURL+"/users/:byUserId/careergroups/:byCareerGroupId/careers/:byCareerId", wrapper.GetUsersByUserIdCareergroupsByCareerGroupIdCareersByCareerId)
	router.GET(baseURL+"/users/:byUserId/notes", wrapper.GetUsersByUserIdNotes)
	router.POST(baseURL+"/users/:byUserId/notes", wrapper.PostUsersByUserIdNotes)
	router.DELETE(baseURL+"/users/:byUserId/notes/:byNoteId", wrapper.DeleteUsersByUserIdNotesByNoteId)
	router.PUT(baseURL+"/users/:byUserId/notes/:byNoteId", wrapper.PutUsersByUserIdNotesByNoteId)
	router.PUT(baseURL+"/users/:byUserId/notes/:byNoteId/items", wrapper.PutUsersByUserIdNotesByNoteIdItems)
	router.GET(baseURL+"/users/:byUserId/qualifications", wrapper.GetUsersByUserIdQualifications)
	router.PUT(baseURL+"/users/:byUserId/qualifications", wrapper.PutUsersByUserIdQualifications)
	router.GET(baseURL+"/users/:byUserId/skills", wrapper.GetUsersByUserIdSkills)
	router.GET(baseURL+"/users/:byUserId/solutions", wrapper.GetUsersByUserIdSolutions)
	router.PUT(baseURL+"/users/:byUserId/solutions", wrapper.PutUsersByUserIdSolutions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/6CrYP1e15VWvVT9vwAAAP//peljTKB6AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
