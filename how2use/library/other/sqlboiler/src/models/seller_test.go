// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSellers(t *testing.T) {
	t.Parallel()

	query := Sellers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSellersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seller{}
	if err = randomize.Struct(seed, o, sellerDBTypes, true, sellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seller{}
	if err = randomize.Struct(seed, o, sellerDBTypes, true, sellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Sellers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seller{}
	if err = randomize.Struct(seed, o, sellerDBTypes, true, sellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SellerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seller{}
	if err = randomize.Struct(seed, o, sellerDBTypes, true, sellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SellerExists(ctx, tx, o.CompanyID, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Seller exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SellerExists to return true, but got false.")
	}
}

func testSellersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seller{}
	if err = randomize.Struct(seed, o, sellerDBTypes, true, sellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sellerFound, err := FindSeller(ctx, tx, o.CompanyID, o.ID)
	if err != nil {
		t.Error(err)
	}

	if sellerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSellersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seller{}
	if err = randomize.Struct(seed, o, sellerDBTypes, true, sellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Sellers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSellersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seller{}
	if err = randomize.Struct(seed, o, sellerDBTypes, true, sellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Sellers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSellersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sellerOne := &Seller{}
	sellerTwo := &Seller{}
	if err = randomize.Struct(seed, sellerOne, sellerDBTypes, false, sellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}
	if err = randomize.Struct(seed, sellerTwo, sellerDBTypes, false, sellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sellerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sellerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sellers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSellersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sellerOne := &Seller{}
	sellerTwo := &Seller{}
	if err = randomize.Struct(seed, sellerOne, sellerDBTypes, false, sellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}
	if err = randomize.Struct(seed, sellerTwo, sellerDBTypes, false, sellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sellerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sellerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sellerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Seller) error {
	*o = Seller{}
	return nil
}

func sellerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Seller) error {
	*o = Seller{}
	return nil
}

func sellerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Seller) error {
	*o = Seller{}
	return nil
}

func sellerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Seller) error {
	*o = Seller{}
	return nil
}

func sellerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Seller) error {
	*o = Seller{}
	return nil
}

func sellerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Seller) error {
	*o = Seller{}
	return nil
}

func sellerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Seller) error {
	*o = Seller{}
	return nil
}

func sellerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Seller) error {
	*o = Seller{}
	return nil
}

func sellerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Seller) error {
	*o = Seller{}
	return nil
}

func testSellersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Seller{}
	o := &Seller{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sellerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Seller object: %s", err)
	}

	AddSellerHook(boil.BeforeInsertHook, sellerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sellerBeforeInsertHooks = []SellerHook{}

	AddSellerHook(boil.AfterInsertHook, sellerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sellerAfterInsertHooks = []SellerHook{}

	AddSellerHook(boil.AfterSelectHook, sellerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sellerAfterSelectHooks = []SellerHook{}

	AddSellerHook(boil.BeforeUpdateHook, sellerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sellerBeforeUpdateHooks = []SellerHook{}

	AddSellerHook(boil.AfterUpdateHook, sellerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sellerAfterUpdateHooks = []SellerHook{}

	AddSellerHook(boil.BeforeDeleteHook, sellerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sellerBeforeDeleteHooks = []SellerHook{}

	AddSellerHook(boil.AfterDeleteHook, sellerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sellerAfterDeleteHooks = []SellerHook{}

	AddSellerHook(boil.BeforeUpsertHook, sellerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sellerBeforeUpsertHooks = []SellerHook{}

	AddSellerHook(boil.AfterUpsertHook, sellerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sellerAfterUpsertHooks = []SellerHook{}
}

func testSellersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seller{}
	if err = randomize.Struct(seed, o, sellerDBTypes, true, sellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSellersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seller{}
	if err = randomize.Struct(seed, o, sellerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(sellerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Sellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSellersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seller{}
	if err = randomize.Struct(seed, o, sellerDBTypes, true, sellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSellersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seller{}
	if err = randomize.Struct(seed, o, sellerDBTypes, true, sellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SellerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSellersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Seller{}
	if err = randomize.Struct(seed, o, sellerDBTypes, true, sellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sellers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sellerDBTypes = map[string]string{`CompanyID`: `bigint`, `ID`: `bigint`, `Name`: `character varying`}
	_             = bytes.MinRead
)

func testSellersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sellerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sellerAllColumns) == len(sellerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Seller{}
	if err = randomize.Struct(seed, o, sellerDBTypes, true, sellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sellerDBTypes, true, sellerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSellersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sellerAllColumns) == len(sellerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Seller{}
	if err = randomize.Struct(seed, o, sellerDBTypes, true, sellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sellerDBTypes, true, sellerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sellerAllColumns, sellerPrimaryKeyColumns) {
		fields = sellerAllColumns
	} else {
		fields = strmangle.SetComplement(
			sellerAllColumns,
			sellerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SellerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSellersUpsert(t *testing.T) {
	t.Parallel()

	if len(sellerAllColumns) == len(sellerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Seller{}
	if err = randomize.Struct(seed, &o, sellerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Seller: %s", err)
	}

	count, err := Sellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sellerDBTypes, false, sellerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Seller struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Seller: %s", err)
	}

	count, err = Sellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
