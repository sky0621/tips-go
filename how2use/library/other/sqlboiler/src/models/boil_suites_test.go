// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Contents", testContents)
	t.Run("Reviews", testReviews)
	t.Run("Sellers", testSellers)
}

func TestDelete(t *testing.T) {
	t.Run("Contents", testContentsDelete)
	t.Run("Reviews", testReviewsDelete)
	t.Run("Sellers", testSellersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Contents", testContentsQueryDeleteAll)
	t.Run("Reviews", testReviewsQueryDeleteAll)
	t.Run("Sellers", testSellersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Contents", testContentsSliceDeleteAll)
	t.Run("Reviews", testReviewsSliceDeleteAll)
	t.Run("Sellers", testSellersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Contents", testContentsExists)
	t.Run("Reviews", testReviewsExists)
	t.Run("Sellers", testSellersExists)
}

func TestFind(t *testing.T) {
	t.Run("Contents", testContentsFind)
	t.Run("Reviews", testReviewsFind)
	t.Run("Sellers", testSellersFind)
}

func TestBind(t *testing.T) {
	t.Run("Contents", testContentsBind)
	t.Run("Reviews", testReviewsBind)
	t.Run("Sellers", testSellersBind)
}

func TestOne(t *testing.T) {
	t.Run("Contents", testContentsOne)
	t.Run("Reviews", testReviewsOne)
	t.Run("Sellers", testSellersOne)
}

func TestAll(t *testing.T) {
	t.Run("Contents", testContentsAll)
	t.Run("Reviews", testReviewsAll)
	t.Run("Sellers", testSellersAll)
}

func TestCount(t *testing.T) {
	t.Run("Contents", testContentsCount)
	t.Run("Reviews", testReviewsCount)
	t.Run("Sellers", testSellersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Contents", testContentsHooks)
	t.Run("Reviews", testReviewsHooks)
	t.Run("Sellers", testSellersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Contents", testContentsInsert)
	t.Run("Contents", testContentsInsertWhitelist)
	t.Run("Reviews", testReviewsInsert)
	t.Run("Reviews", testReviewsInsertWhitelist)
	t.Run("Sellers", testSellersInsert)
	t.Run("Sellers", testSellersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ReviewToContentUsingContent", testReviewToOneContentUsingContent)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ContentToReviews", testContentToManyReviews)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ReviewToContentUsingReviews", testReviewToOneSetOpContentUsingContent)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ContentToReviews", testContentToManyAddOpReviews)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Contents", testContentsReload)
	t.Run("Reviews", testReviewsReload)
	t.Run("Sellers", testSellersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Contents", testContentsReloadAll)
	t.Run("Reviews", testReviewsReloadAll)
	t.Run("Sellers", testSellersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Contents", testContentsSelect)
	t.Run("Reviews", testReviewsSelect)
	t.Run("Sellers", testSellersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Contents", testContentsUpdate)
	t.Run("Reviews", testReviewsUpdate)
	t.Run("Sellers", testSellersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Contents", testContentsSliceUpdateAll)
	t.Run("Reviews", testReviewsSliceUpdateAll)
	t.Run("Sellers", testSellersSliceUpdateAll)
}
