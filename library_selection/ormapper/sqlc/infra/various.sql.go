// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: various.sql

package infra

import (
	"context"
)

const listUsersWithPostAndCommentCount = `-- name: ListUsersWithPostAndCommentCount :many
SELECT
    users.id AS user_id,
    users.name AS user_name,
    COUNT(DISTINCT posts.id) AS post_count,
    COUNT(comments.id) AS comment_count
FROM
    users
        LEFT JOIN
    posts ON users.id = posts.user_id
        LEFT JOIN
    comments ON users.id = comments.user_id AND posts.id = comments.post_id
GROUP BY
    users.id, users.name
ORDER BY
    post_count DESC, comment_count DESC
`

type ListUsersWithPostAndCommentCountRow struct {
	UserID       int64
	UserName     string
	PostCount    int64
	CommentCount int64
}

func (q *Queries) ListUsersWithPostAndCommentCount(ctx context.Context) ([]ListUsersWithPostAndCommentCountRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsersWithPostAndCommentCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersWithPostAndCommentCountRow
	for rows.Next() {
		var i ListUsersWithPostAndCommentCountRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.PostCount,
			&i.CommentCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
