// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: school.sql

package infra

import (
	"context"
	"database/sql"
)

const createClassBatch = `-- name: CreateClassBatch :execresult
INSERT INTO class(class_name, grade_id)
VALUES ('１年１組', 1),
       ('１年２組', 1)
`

func (q *Queries) CreateClassBatch(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createClassBatch)
}

const createGrade = `-- name: CreateGrade :execlastid
INSERT INTO grade(grade_name, school_id)
VALUES ('１年', 1)
`

func (q *Queries) CreateGrade(ctx context.Context) (int64, error) {
	result, err := q.db.ExecContext(ctx, createGrade)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const createSchool = `-- name: CreateSchool :execlastid
INSERT INTO school(school_name)
VALUES ('テスト学校')
`

func (q *Queries) CreateSchool(ctx context.Context) (int64, error) {
	result, err := q.db.ExecContext(ctx, createSchool)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const createStudentBatch = `-- name: CreateStudentBatch :execresult
INSERT INTO student(name, class_id)
VALUES ('山田太郎', 1),
       ('田中花子', 1),
       ('佐藤次郎', 1),
       ('鈴木三郎', 1),
       ('高橋四郎', 2),
       ('伊藤五郎', 2),
       ('渡辺六郎', 2)
`

func (q *Queries) CreateStudentBatch(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createStudentBatch)
}

const getSchoolByID = `-- name: GetSchoolByID :one
SELECT school_id, school_name FROM school WHERE school_id = ?
`

func (q *Queries) GetSchoolByID(ctx context.Context, schoolID int64) (School, error) {
	row := q.db.QueryRowContext(ctx, getSchoolByID, schoolID)
	var i School
	err := row.Scan(&i.SchoolID, &i.SchoolName)
	return i, err
}

const listClassByGradeID = `-- name: ListClassByGradeID :many
SELECT class_id, class_name, grade_id FROM class WHERE grade_id = ?
`

func (q *Queries) ListClassByGradeID(ctx context.Context, gradeID sql.NullInt64) ([]Class, error) {
	rows, err := q.db.QueryContext(ctx, listClassByGradeID, gradeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Class{}
	for rows.Next() {
		var i Class
		if err := rows.Scan(&i.ClassID, &i.ClassName, &i.GradeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGradeBySchoolID = `-- name: ListGradeBySchoolID :many
SELECT grade_id, grade_name, school_id FROM grade WHERE school_id = ?
`

func (q *Queries) ListGradeBySchoolID(ctx context.Context, schoolID sql.NullInt64) ([]Grade, error) {
	rows, err := q.db.QueryContext(ctx, listGradeBySchoolID, schoolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Grade{}
	for rows.Next() {
		var i Grade
		if err := rows.Scan(&i.GradeID, &i.GradeName, &i.SchoolID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStudentByClassID = `-- name: ListStudentByClassID :many
SELECT student_id, name, class_id FROM student WHERE class_id = ?
`

func (q *Queries) ListStudentByClassID(ctx context.Context, classID sql.NullInt64) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, listStudentByClassID, classID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Student{}
	for rows.Next() {
		var i Student
		if err := rows.Scan(&i.StudentID, &i.Name, &i.ClassID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStudentsWithClassWithGradeWithSchool = `-- name: ListStudentsWithClassWithGradeWithSchool :many
SELECT sc.school_id,
       sc.school_name,
       g.grade_id,
       g.grade_name,
       c.class_id,
       c.class_name,
       s.student_id,
       s.name
FROM student s
         INNER JOIN class c ON s.class_id = c.class_id
         INNER JOIN grade g ON c.grade_id = g.grade_id
         INNER JOIN school sc ON g.school_id = sc.school_id
WHERE sc.school_id = ?
`

type ListStudentsWithClassWithGradeWithSchoolRow struct {
	SchoolID   int64
	SchoolName string
	GradeID    int64
	GradeName  string
	ClassID    int64
	ClassName  string
	StudentID  int64
	Name       string
}

func (q *Queries) ListStudentsWithClassWithGradeWithSchool(ctx context.Context, schoolID int64) ([]ListStudentsWithClassWithGradeWithSchoolRow, error) {
	rows, err := q.db.QueryContext(ctx, listStudentsWithClassWithGradeWithSchool, schoolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListStudentsWithClassWithGradeWithSchoolRow{}
	for rows.Next() {
		var i ListStudentsWithClassWithGradeWithSchoolRow
		if err := rows.Scan(
			&i.SchoolID,
			&i.SchoolName,
			&i.GradeID,
			&i.GradeName,
			&i.ClassID,
			&i.ClassName,
			&i.StudentID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
