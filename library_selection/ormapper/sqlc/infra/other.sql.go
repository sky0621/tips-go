// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: other.sql

package infra

import (
	"context"
	"database/sql"
)

const createDepartmentsBatch = `-- name: CreateDepartmentsBatch :execresult
INSERT INTO departments (department_id, department_name)
VALUES (1, 'Sales'),
       (2, 'Engineering'),
       (3, 'HR'),
       (4, 'Finance')
`

func (q *Queries) CreateDepartmentsBatch(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createDepartmentsBatch)
}

const createEmployeesBatch = `-- name: CreateEmployeesBatch :execresult
INSERT INTO employees (employee_id, first_name, last_name, salary, department_id, join_date)
VALUES (101, 'John', 'Doe', 55000.00, 1, '2020-01-15'),
       (102, 'Jane', 'Smith', 75000.00, 2, '2019-06-01'),
       (103, 'Alice', 'Brown', 80000.00, 2, '2021-07-20'),
       (104, 'Bob', 'Davis', 50000.00, 3, '2018-03-10'),
       (105, 'Charlie', 'Evans', 65000.00, 1, '2022-11-05'),
       (106, 'Eve', 'White', 90000.00, 4, '2017-05-23'),
       (107, 'Frank', 'Green', 60000.00, 3, '2023-01-10'),
       (108, 'Grace', 'Hall', 70000.00, 4, '2019-09-15')
`

func (q *Queries) CreateEmployeesBatch(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createEmployeesBatch)
}

const listEmployeesOrderByDepartmentIdAsc = `-- name: ListEmployeesOrderByDepartmentIdAsc :many
SELECT employee_id, first_name, last_name, salary, department_id, join_date FROM employees ORDER BY department_id
`

func (q *Queries) ListEmployeesOrderByDepartmentIdAsc(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, listEmployeesOrderByDepartmentIdAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Employee{}
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.EmployeeID,
			&i.FirstName,
			&i.LastName,
			&i.Salary,
			&i.DepartmentID,
			&i.JoinDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmployeesOrderByDepartmentIdDesc = `-- name: ListEmployeesOrderByDepartmentIdDesc :many
SELECT employee_id, first_name, last_name, salary, department_id, join_date FROM employees ORDER BY department_id DESC
`

func (q *Queries) ListEmployeesOrderByDepartmentIdDesc(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, listEmployeesOrderByDepartmentIdDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Employee{}
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.EmployeeID,
			&i.FirstName,
			&i.LastName,
			&i.Salary,
			&i.DepartmentID,
			&i.JoinDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmployeesOrderByJoinDateAsc = `-- name: ListEmployeesOrderByJoinDateAsc :many
SELECT employee_id, first_name, last_name, salary, department_id, join_date FROM employees ORDER BY join_date
`

func (q *Queries) ListEmployeesOrderByJoinDateAsc(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, listEmployeesOrderByJoinDateAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Employee{}
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.EmployeeID,
			&i.FirstName,
			&i.LastName,
			&i.Salary,
			&i.DepartmentID,
			&i.JoinDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmployeesOrderByJoinDateDesc = `-- name: ListEmployeesOrderByJoinDateDesc :many
SELECT employee_id, first_name, last_name, salary, department_id, join_date FROM employees ORDER BY join_date DESC
`

func (q *Queries) ListEmployeesOrderByJoinDateDesc(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, listEmployeesOrderByJoinDateDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Employee{}
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.EmployeeID,
			&i.FirstName,
			&i.LastName,
			&i.Salary,
			&i.DepartmentID,
			&i.JoinDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmployeesOrderBySalaryAsc = `-- name: ListEmployeesOrderBySalaryAsc :many
SELECT employee_id, first_name, last_name, salary, department_id, join_date FROM employees ORDER BY salary
`

func (q *Queries) ListEmployeesOrderBySalaryAsc(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, listEmployeesOrderBySalaryAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Employee{}
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.EmployeeID,
			&i.FirstName,
			&i.LastName,
			&i.Salary,
			&i.DepartmentID,
			&i.JoinDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmployeesOrderBySalaryDesc = `-- name: ListEmployeesOrderBySalaryDesc :many
SELECT employee_id, first_name, last_name, salary, department_id, join_date FROM employees ORDER BY salary DESC
`

func (q *Queries) ListEmployeesOrderBySalaryDesc(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, listEmployeesOrderBySalaryDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Employee{}
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.EmployeeID,
			&i.FirstName,
			&i.LastName,
			&i.Salary,
			&i.DepartmentID,
			&i.JoinDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmployeesOrderByXXXX = `-- name: ListEmployeesOrderByXXXX :many
SELECT employee_id, first_name, last_name, salary, department_id, join_date FROM employees ORDER BY ? DESC
`

// これは機能しない。
func (q *Queries) ListEmployeesOrderByXXXX(ctx context.Context, dollar_1 interface{}) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, listEmployeesOrderByXXXX, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Employee{}
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.EmployeeID,
			&i.FirstName,
			&i.LastName,
			&i.Salary,
			&i.DepartmentID,
			&i.JoinDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
