// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: comments.sql

package db

import (
	"context"
	"database/sql"
)

const createComment = `-- name: CreateComment :exec
INSERT INTO comments (content, user_id, post_id) VALUES (?, ?, ?)
`

type CreateCommentParams struct {
	Content sql.NullString
	UserID  sql.NullInt64
	PostID  sql.NullInt64
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) error {
	_, err := q.db.ExecContext(ctx, createComment, arg.Content, arg.UserID, arg.PostID)
	return err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments WHERE id = ?
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const getComment = `-- name: GetComment :one
SELECT id, content, user_id, post_id, created_at, updated_at
FROM comments
WHERE id = ? LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.PostID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCommentsByPost = `-- name: ListCommentsByPost :many
SELECT id, content, user_id, post_id, created_at, updated_at
FROM comments
WHERE post_id = ?
`

func (q *Queries) ListCommentsByPost(ctx context.Context, postID sql.NullInt64) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listCommentsByPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.PostID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
