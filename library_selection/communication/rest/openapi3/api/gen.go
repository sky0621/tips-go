// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// CreatedAt 作成日時
type CreatedAt = time.Time

// Todo defines model for Todo.
type Todo struct {
	// Completed 完了フラグ
	Completed *TodoCompleted `json:"completed,omitempty"`

	// Content TODOの内容
	Content *TodoContent `json:"content,omitempty"`

	// CreatedAt 作成日時
	CreatedAt CreatedAt `json:"createdAt"`

	// TodoID TODOを一意に識別するキー
	TodoID TodoID `json:"id"`

	// Title TODOのタイトル
	Title TodoTitle `json:"title"`
}

// TodoCompleted 完了フラグ
type TodoCompleted = bool

// TodoContent TODOの内容
type TodoContent = string

// TodoCreateInput 作成するTODOの入力情報
type TodoCreateInput struct {
	// Content TODOの内容
	Content *TodoContent `json:"content,omitempty"`

	// Title TODOのタイトル
	Title TodoTitle `json:"title"`
}

// TodoID TODOを一意に識別するキー
type TodoID = int

// TodoTitle TODOのタイトル
type TodoTitle = string

// PostTodosJSONRequestBody defines body for PostTodos for application/json ContentType.
type PostTodosJSONRequestBody = TodoCreateInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 全TODO返却
	// (GET /todos)
	GetTodos(ctx echo.Context) error
	// TODO登録
	// (POST /todos)
	PostTodos(ctx echo.Context) error
	// 指定TODO返却
	// (GET /todos/{todoId})
	GetTodosTodoId(ctx echo.Context, todoId TodoID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTodos converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodos(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodos(ctx)
	return err
}

// PostTodos converts echo context to params.
func (w *ServerInterfaceWrapper) PostTodos(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTodos(ctx)
	return err
}

// GetTodosTodoId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodosTodoId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "todoId" -------------
	var todoId TodoID

	err = runtime.BindStyledParameterWithOptions("simple", "todoId", ctx.Param("todoId"), &todoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter todoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodosTodoId(ctx, todoId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/todos", wrapper.GetTodos)
	router.POST(baseURL+"/todos", wrapper.PostTodos)
	router.GET(baseURL+"/todos/:todoId", wrapper.GetTodosTodoId)

}
