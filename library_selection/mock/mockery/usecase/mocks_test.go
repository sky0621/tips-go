// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecase

import (
	"context"

	"github.com/sky0621/tips-go/library_selection/mock/mockery/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserUseCase creates a new instance of MockUserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserUseCase {
	mock := &MockUserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserUseCase is an autogenerated mock type for the UserUseCase type
type MockUserUseCase struct {
	mock.Mock
}

type MockUserUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserUseCase) EXPECT() *MockUserUseCase_Expecter {
	return &MockUserUseCase_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockUserUseCase
func (_mock *MockUserUseCase) CreateUser(ctx context.Context, name string, email string) (*domain.User, error) {
	ret := _mock.Called(ctx, name, email)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*domain.User, error)); ok {
		return returnFunc(ctx, name, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *domain.User); ok {
		r0 = returnFunc(ctx, name, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, name, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserUseCase_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserUseCase_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - email string
func (_e *MockUserUseCase_Expecter) CreateUser(ctx interface{}, name interface{}, email interface{}) *MockUserUseCase_CreateUser_Call {
	return &MockUserUseCase_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, name, email)}
}

func (_c *MockUserUseCase_CreateUser_Call) Run(run func(ctx context.Context, name string, email string)) *MockUserUseCase_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserUseCase_CreateUser_Call) Return(user *domain.User, err error) *MockUserUseCase_CreateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserUseCase_CreateUser_Call) RunAndReturn(run func(ctx context.Context, name string, email string) (*domain.User, error)) *MockUserUseCase_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockUserUseCase
func (_mock *MockUserUseCase) DeleteUser(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserUseCase_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserUseCase_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserUseCase_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockUserUseCase_DeleteUser_Call {
	return &MockUserUseCase_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockUserUseCase_DeleteUser_Call) Run(run func(ctx context.Context, id string)) *MockUserUseCase_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserUseCase_DeleteUser_Call) Return(err error) *MockUserUseCase_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserUseCase_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockUserUseCase_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function for the type MockUserUseCase
func (_mock *MockUserUseCase) GetAllUsers(ctx context.Context) ([]*domain.User, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []*domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*domain.User, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*domain.User); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserUseCase_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type MockUserUseCase_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserUseCase_Expecter) GetAllUsers(ctx interface{}) *MockUserUseCase_GetAllUsers_Call {
	return &MockUserUseCase_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", ctx)}
}

func (_c *MockUserUseCase_GetAllUsers_Call) Run(run func(ctx context.Context)) *MockUserUseCase_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserUseCase_GetAllUsers_Call) Return(users []*domain.User, err error) *MockUserUseCase_GetAllUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockUserUseCase_GetAllUsers_Call) RunAndReturn(run func(ctx context.Context) ([]*domain.User, error)) *MockUserUseCase_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockUserUseCase
func (_mock *MockUserUseCase) GetUser(ctx context.Context, id string) (*domain.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserUseCase_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserUseCase_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserUseCase_Expecter) GetUser(ctx interface{}, id interface{}) *MockUserUseCase_GetUser_Call {
	return &MockUserUseCase_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *MockUserUseCase_GetUser_Call) Run(run func(ctx context.Context, id string)) *MockUserUseCase_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserUseCase_GetUser_Call) Return(user *domain.User, err error) *MockUserUseCase_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserUseCase_GetUser_Call) RunAndReturn(run func(ctx context.Context, id string) (*domain.User, error)) *MockUserUseCase_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockUserUseCase
func (_mock *MockUserUseCase) UpdateUser(ctx context.Context, id string, name string, email string) (*domain.User, error) {
	ret := _mock.Called(ctx, id, name, email)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (*domain.User, error)); ok {
		return returnFunc(ctx, id, name, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) *domain.User); ok {
		r0 = returnFunc(ctx, id, name, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, id, name, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserUseCase_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserUseCase_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
//   - email string
func (_e *MockUserUseCase_Expecter) UpdateUser(ctx interface{}, id interface{}, name interface{}, email interface{}) *MockUserUseCase_UpdateUser_Call {
	return &MockUserUseCase_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, id, name, email)}
}

func (_c *MockUserUseCase_UpdateUser_Call) Run(run func(ctx context.Context, id string, name string, email string)) *MockUserUseCase_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockUserUseCase_UpdateUser_Call) Return(user *domain.User, err error) *MockUserUseCase_UpdateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserUseCase_UpdateUser_Call) RunAndReturn(run func(ctx context.Context, id string, name string, email string) (*domain.User, error)) *MockUserUseCase_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}
