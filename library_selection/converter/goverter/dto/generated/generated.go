// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package generated

import (
	dto "github.com/sky0621/tips-go/library_selection/converter/goverter/dto"
	model "github.com/sky0621/tips-go/library_selection/converter/goverter/model"
)

type SchoolConverterImpl struct{}

func (c *SchoolConverterImpl) FromClassModel(source model.Class) dto.ClassDTO {
	var dtoClassDTO dto.ClassDTO
	dtoClassDTO.ID = string(source.ID)
	dtoClassDTO.Name = source.Name
	dtoClassDTO.OnlyDTO = dto.OnlyModelToOnlyDTO(source.OnlyModel)
	if source.Students != nil {
		dtoClassDTO.Students = make([]dto.StudentDTO, len(source.Students))
		for i := 0; i < len(source.Students); i++ {
			dtoClassDTO.Students[i] = c.modelStudentToDtoStudentDTO(source.Students[i])
		}
	}
	return dtoClassDTO
}
func (c *SchoolConverterImpl) FromGradeModel(source model.Grade) dto.GradeDTO {
	var dtoGradeDTO dto.GradeDTO
	dtoGradeDTO.ID = string(source.ID)
	dtoGradeDTO.Name = source.GradeName
	dtoGradeDTO.No = source.No
	dtoGradeDTO.CreatedAt = dto.TimeToTime(source.CreatedAt)
	if source.Classes != nil {
		dtoGradeDTO.Classes = make([]dto.ClassDTO, len(source.Classes))
		for i := 0; i < len(source.Classes); i++ {
			dtoGradeDTO.Classes[i] = c.FromClassModel(source.Classes[i])
		}
	}
	return dtoGradeDTO
}
func (c *SchoolConverterImpl) FromSchoolModel(source model.School) dto.SchoolDTO {
	var dtoSchoolDTO dto.SchoolDTO
	dtoSchoolDTO.ID = string(source.ID)
	dtoSchoolDTO.Name = source.Name
	dtoSchoolDTO.No = source.No
	dtoSchoolDTO.CreatedAt = dto.TimeToTime(source.CreatedAt)
	if source.Grades != nil {
		dtoSchoolDTO.Grades = make([]dto.GradeDTO, len(source.Grades))
		for i := 0; i < len(source.Grades); i++ {
			dtoSchoolDTO.Grades[i] = c.FromGradeModel(source.Grades[i])
		}
	}
	return dtoSchoolDTO
}
func (c *SchoolConverterImpl) ToClassModel(source dto.ClassDTO) model.Class {
	var modelClass model.Class
	modelClass.ID = model.ClassID(source.ID)
	modelClass.Name = source.Name
	modelClass.OnlyModel = dto.OnlyDTOToOnlyModel(source.OnlyDTO)
	if source.Students != nil {
		modelClass.Students = make([]model.Student, len(source.Students))
		for i := 0; i < len(source.Students); i++ {
			modelClass.Students[i] = c.ToStudentModel(source.Students[i])
		}
	}
	return modelClass
}
func (c *SchoolConverterImpl) ToGradeModel(source dto.GradeDTO) model.Grade {
	var modelGrade model.Grade
	modelGrade.ID = model.GradeID(source.ID)
	modelGrade.GradeName = source.Name
	modelGrade.No = source.No
	modelGrade.CreatedAt = dto.TimeToTime(source.CreatedAt)
	if source.Classes != nil {
		modelGrade.Classes = make([]model.Class, len(source.Classes))
		for i := 0; i < len(source.Classes); i++ {
			modelGrade.Classes[i] = c.ToClassModel(source.Classes[i])
		}
	}
	return modelGrade
}
func (c *SchoolConverterImpl) ToSchoolModel(source dto.SchoolDTO) model.School {
	var modelSchool model.School
	modelSchool.ID = model.SchoolID(source.ID)
	modelSchool.Name = source.Name
	modelSchool.No = source.No
	modelSchool.CreatedAt = dto.TimeToTime(source.CreatedAt)
	if source.Grades != nil {
		modelSchool.Grades = make([]model.Grade, len(source.Grades))
		for i := 0; i < len(source.Grades); i++ {
			modelSchool.Grades[i] = c.ToGradeModel(source.Grades[i])
		}
	}
	return modelSchool
}
func (c *SchoolConverterImpl) ToStudentModel(source dto.StudentDTO) model.Student {
	var modelStudent model.Student
	modelStudent.ID = model.SchoolID(source.ID)
	modelStudent.Name = source.Name
	return modelStudent
}
func (c *SchoolConverterImpl) modelStudentToDtoStudentDTO(source model.Student) dto.StudentDTO {
	var dtoStudentDTO dto.StudentDTO
	dtoStudentDTO.ID = string(source.ID)
	dtoStudentDTO.Name = source.Name
	return dtoStudentDTO
}
